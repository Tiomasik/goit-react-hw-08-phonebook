{"version":3,"file":"static/js/222.dc53d178.chunk.js","mappings":"+OAMMA,EAAgB,CACpBC,KAAM,GAAIC,MAAO,GAAIC,SAAU,IAG3BC,EAASC,EAAAA,KAAaC,MAAM,CAC9BL,KAAMI,EAAAA,KAAaE,QAAQ,4HAAgEC,WAC3FN,MAAOG,EAAAA,KAAaH,QACpBC,SAAUE,EAAAA,KAAaI,IAAI,GAAGC,IAAI,MAGhCC,EAAgB,SAAC,GAAc,IAAZV,EAAW,EAAXA,KACvB,OACE,SAAC,KAAD,CAAcA,KAAMA,EAAMW,UAAU,MAClCC,OAAQ,kBAAM,mKAAN,GAEb,EAEKC,EAAgB,SAAC,GAAc,IAAZb,EAAW,EAAXA,KACvB,OACE,SAAC,KAAD,CAAcA,KAAMA,EAAMW,UAAU,MAClCC,OAAQ,kBAAM,+CAAN,GAEb,EAEKE,EAAoB,SAAC,GAAc,IAAZd,EAAW,EAAXA,KAC3B,OACE,SAAC,KAAD,CAAcA,KAAMA,EAAMW,UAAU,MAClCC,OAAQ,kBAAM,iEAAN,GAEb,EA4CD,EA1CqB,WACnB,IAAMG,GAAWC,EAAAA,EAAAA,MAaX,OACI,iCACI,gDACA,SAAC,KAAD,CAAQjB,cAAeA,EAAekB,SAdhC,SAACC,EAAD,GAA2B,IAAjBC,EAAgB,EAAhBA,UAEtBC,EAAe,CAAEpB,KADWkB,EAA1BlB,KACqBC,MADKiB,EAApBjB,MACsBC,SADFgB,EAAbhB,UAGrBmB,QAAQC,IAAIF,GACZL,GACEQ,EAAAA,EAAAA,IAASH,IAEXD,GACD,EAK0EK,iBAAkBrB,EAA/E,UACI,UAAC,KAAD,YACA,SAAC,KAAD,CACIH,KAAK,OACLyB,YAAY,eAEhB,SAACf,EAAD,CAAeV,KAAK,UACpB,SAAC,KAAD,CACIA,KAAK,QACLyB,YAAY,UAEZ,SAACZ,EAAD,CAAeb,KAAK,WACxB,SAAC,KAAD,CACIA,KAAK,WACL0B,KAAK,WACLD,YAAY,cAEZ,SAACX,EAAD,CAAmBd,KAAK,cACxB,mBAAQ0B,KAAK,SAAb,6BAKnB,EClEL,EATiB,WAET,OACI,2BACI,SAAC,EAAD,KAGX,C","sources":["components/FormRegister/FormRegister.jsx","pages/Register.jsx"],"sourcesContent":["import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { useDispatch } from 'react-redux';\n\nimport { register } from 'redux/auth/operations';\n\nconst initialValues = {\n  name: '', email: '', password: ''\n}\n\nconst schema = yup.object().shape({\n    name: yup.string().matches(/(^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$)/).required(),\n    email: yup.string().email(),\n    password: yup.string().min(7).max(12),\n});\n\nconst FormErrorName = ({ name }) => {\n  return (\n    <ErrorMessage name={name} component='div'\n      render={() => <div>Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan</div>} />\n  )\n}\n\nconst FormErrorMail = ({ name }) => {\n  return (\n    <ErrorMessage name={name} component='div'\n      render={() => <div>Mail must be valid</div>} />\n  )\n}\n\nconst FormErrorPassword = ({ name }) => {\n  return (\n    <ErrorMessage name={name} component='div'\n      render={() => <div>Length password must be 7-12 symbols</div>} />\n  )\n}\n\nconst FormRegister = () => {\n  const dispatch = useDispatch();\n\n  const handlSubmit = (value, { resetForm }) => {\n    const { name, email, password } = value\n    const arrayContact = { name, email, password }\n    \n    console.log(arrayContact)\n    dispatch(\n      register(arrayContact)\n    );\n    resetForm()  \n  }\n\n        return (\n            <>\n                <h2>I am Register-page</h2>\n                <Formik initialValues={initialValues} onSubmit={handlSubmit} validationSchema={schema}>\n                    <Form>\n                    <Field  \n                        name=\"name\"\n                        placeholder=\"User name\"\n                    />\n                    <FormErrorName name=\"name\"/>\n                    <Field\n                        name=\"email\"\n                        placeholder=\"Mail\"\n                    />\n                        <FormErrorMail name=\"email\" />\n                    <Field\n                        name=\"password\"\n                        type=\"password\"\n                        placeholder=\"Password\"\n                    />\n                        <FormErrorPassword name=\"password\" />\n                        <button type='submit'>Register</button>\n                    </Form>\n                </Formik>\n            </>\n        )\n    };\n\nexport default FormRegister;","import FormRegister from '../components/FormRegister/FormRegister';\n\nconst Register = () => {\n\n        return (\n            <main>\n                <FormRegister />\n            </main>\n        )\n    };\n\nexport default Register;"],"names":["initialValues","name","email","password","schema","yup","shape","matches","required","min","max","FormErrorName","component","render","FormErrorMail","FormErrorPassword","dispatch","useDispatch","onSubmit","value","resetForm","arrayContact","console","log","register","validationSchema","placeholder","type"],"sourceRoot":""}