{"version":3,"file":"static/js/277.dd6ed026.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/Form/Form.styled.jsx","components/Form/Form.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts.styled.jsx","components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","pages/Contacts.jsx"],"sourcesContent":["export const getContacts = state => state.contacts.contacts.items;\n\nexport const getFilter = state => state.contacts.filter;\n\nexport const gettIsLoading = state => state.contacts.contacts.isLoading;\n\nexport const getError = state => state.contacts.contacts.error;","import styled from 'styled-components';\nimport { Form } from 'formik';\n\nexport const StyleForm = styled(Form) `\n    margin-left: auto;\n    margin-right: auto;\n    width:400px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    border-radius: 10px;\n    padding: 20px 0;\n    margin-bottom: 20px;\n    background-color: #f0f0f7;\n    box-shadow: 10px 10px 10px 2px rgba(34, 60, 80, 0.2);\n                \n\n    label{\n        font-weight: 500;\n    }\n\n    input{\n        width: 300px;\n        padding: 3px;\n        margin-bottom:20px;\n        font-size: 20px;\n        border-radius: 5px;\n    }\n\n    button{\n        width: 100px;\n        padding: 5px 0;\n        cursor: pointer;\n        border: 1px solid blue;\n        background-color: transparent;\n        border-radius: 5px;\n\n        :hover, :focus {\n            background-color: blue;\n            color: white;\n        }\n    }\n\n    div {\n        color: red;\n        margin-bottom: 20px;\n        width: 360px;\n        text-align: center;\n    }\n`\n        \n     ","import { Formik, Field, ErrorMessage  } from 'formik';\nimport * as yup from 'yup';\nimport { useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\n\nimport { getContacts } from \"redux/contacts/selectors\";\nimport { StyleForm } from './Form.styled'\nimport { addContact } from \"redux/contacts/operations\";\n\nconst initialValues = {\n  name: '', number: ''\n}\n\nconst schema = yup.object().shape({\n  name: yup.string().matches(/(^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$)/).required(),\n  number: yup.number().required().integer(),\n});\n\nconst FormErrorName = ({ name }) => {\n  return (\n    <ErrorMessage name={name} component='div'\n      render={() => <div>Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan</div>} />\n  )\n}\n\nconst FormErrorNumber = ({ name }) => {\n  return (\n    <ErrorMessage name={name} component='div'\n      render={() => <div>Phone number must be digits and can contain spaces, dashes, parentheses and can start with +</div>} />\n  )\n}\n\nconst FormSubmit = () => {\n  const contacts = useSelector(getContacts)\n  const dispatch = useDispatch();\n  const handlSubmit = (value, { resetForm }) => {\n    const { name, number } = value\n    const arrayContact = { name, number }\n\n    if (!(contacts.filter(contact => contact.name.toLowerCase() === arrayContact.name.trim().toLowerCase())).length) {\n      resetForm()\n      return dispatch(addContact(arrayContact))\n    } else alert(`${arrayContact.name} is already in contacts`)\n    resetForm()  \n  }\n\n  return (\n    <>\n      <h2 style={{textAlign: 'center',\n                  fontSize: 30,\n                  fontWeight:700}}>Phonebook</h2>\n        \n      <Formik initialValues={initialValues} onSubmit={handlSubmit} validationSchema={schema}>\n        <StyleForm>\n          <label htmlFor='userName'>Name</label>\n          <Field  \n          id='userName'\n          name=\"name\"\n          />\n          <FormErrorName name=\"name\"/>\n          \n          <label htmlFor='userNumber'>Number</label>\n          <Field\n            id='userNumber'\n            name=\"number\"\n          />\n          <FormErrorNumber name=\"number\"/>\n          <button type='submit'>Add Contact</button>\n        </StyleForm>\n      </Formik>\n    </>    \n  );\n}\n\nexport default FormSubmit;","import styled from 'styled-components';\nimport { BsFillEmojiSmileFill, BsFillTelephoneFill } from \"react-icons/bs\";\n\nexport const Item = styled.p `\n    display: flex;\n    align-items: center;\n    gap: 10px;\n`\nexport const IconSmile = styled(BsFillEmojiSmileFill) `\n    color: tomato;\n`\n\nexport const IconPhone = styled(BsFillTelephoneFill) `\n    color: tomato;\n`","import PropTypes from 'prop-types';\nimport { useDispatch } from \"react-redux\";\n\nimport { deleteContact } from \"redux/contacts/operations\";\nimport { Item, IconSmile, IconPhone } from \"./ContactItem.styled\";\n\nconst ContactItem = ({ name, number, id }) => {\n    const dispatch = useDispatch();\n\n    return (\n        <>\n            <div>\n                <Item><IconSmile /><span>{name}</span></Item>\n                <Item><IconPhone/><span>{number}</span></Item>\n            </div>\n            <button type=\"button\" onClick={() => dispatch(deleteContact(id))}>Delete contact</button>\n        </>)\n}\n\nContactItem.propTypes = {\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n}\n\nexport default ContactItem","import styled from 'styled-components';\n\nexport const List = styled.ul `\n    margin: 0 auto;\n    margin-top: 15px;\n    padding: 10px;\n    width: 450px;\n    display:flex;\n    flex-direction:column;\n    gap:10px;\n`\nexport const Item = styled.li `\n    padding:0 10px;\n    background-color: #f0f0f7;\n    box-shadow: 0 2px 5px rgba(0,0,0,0.2), 0 4px 6px rgba(0,0,0,0.2);\n    border-radius: 5px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    \n    button{\n        padding: 5px;\n        border: 1px solid tomato;\n        background-color: transparent;\n        border-radius: 5px;\n        cursor: pointer;\n\n        :hover, :focus {\n            background-color: tomato;\n            color: white;\n        }\n    }\n\n    p {\n        font-weight: 500;\n    }\n`\nexport const Info = styled.p `\n    justify-content: center;\n    color: tomato;\n    font-size: 20px;\n    font-weight: 400;\n    display: flex;\n    gap: 5px;\n    \n`\n\nexport const Filter = styled.span `\n    font-weight: 700;\n`","import { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { useEffect } from \"react\";\n\nimport { getContacts, getFilter } from \"redux/contacts/selectors\";\nimport ContactItem from '../ContactItem/ContactItem'\nimport { List, Item, Info, Filter } from './ContactList.styled'\nimport { fetchAll } from \"redux/contacts/operations\";\n\nexport const ContactList = () => {\n    const dispatch = useDispatch();\n    const contacts = useSelector(getContacts)\n    const filter = useSelector(getFilter)\n\n    useEffect(() => {\n        dispatch(fetchAll());\n    }, [dispatch]);\n    \n    const getVisibleContacts = () => {\n        return contacts.filter(contact => contact.name.toLowerCase().includes(filter.trim().toLowerCase()))\n    }\n        \n    return (\n        <>\n            {contacts.length ===0 && <Info>Sorry, but you don't have any contacts</Info>}\n            {getVisibleContacts().length === 0 && contacts.length !== 0\n                && <Info><span>Sorry, but you don't have contact</span> \n                <Filter>{filter}</Filter></Info>}\n            < List >\n            {getVisibleContacts().map(({ id, name, number }) =>\n                <Item key={id}>\n                    <ContactItem name={name}\n                        number={number}\n                        id={id} />\n                </Item>)}\n            </List >\n        </>\n    )\n}\n\nexport default ContactList","import styled from 'styled-components';\n\nexport const StyleName = styled.label `\n    display: block;\n    text-align: center;\n    font-weight: 500;\n    \n`\nexport const StyleInput = styled.input `\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n    width: 200px;\n    padding: 3px;\n    border-radius: 5px;\n`\n","import { useDispatch, useSelector } from \"react-redux\";\n\nimport { filterContacts } from \"redux/contacts/contactsSlice\";\nimport { getContacts } from \"redux/contacts/selectors\";\nimport { StyleName } from './Filter.styled'\nimport { StyleInput } from './Filter.styled'\n\nconst Filter = () => {\n    const dispatch = useDispatch();\n    const contacts = useSelector(getContacts)\n\n    const changeFilter = (evt) => {\n        dispatch(filterContacts(evt.currentTarget.value))\n    }\nreturn (\n    <>\n        {contacts.length !== 0 && <div>\n            <h3 style={{textAlign: 'center',\n                        fontSize: 26,\n                        fontWeight: 700,\n                        marginTop: 0,\n                        marginBottom: 10}}>Contacts</h3>\n            <StyleName htmlFor='filter'>Find contacts by names</StyleName>\n            <StyleInput type=\"text\"\n                    id='filter'\n                    onChange={changeFilter}/>\n        </div >}\n    </>\n    )\n}\n\nexport default Filter","import styled from 'styled-components';\n\nexport const ContactsWraper = styled.div `\n    width: 800px;\n    background-color: #e0e0eb;\n    margin-left: auto;\n    margin-right: auto;\n    box-shadow: 0 0 5px 5px rgba(0,0,0,0.2);\n`","import styled from 'styled-components';\n\nexport const LoaderStyle = styled.div `\n    text-align: center;\n`","import { RotatingLines } from 'react-loader-spinner'\nimport { LoaderStyle } from './Loader.styled'\n\n\nconst Loader = () => (\n    <LoaderStyle>\n        <RotatingLines\n        strokeColor=\"tomato\"\n        strokeWidth=\"4\"\n        animationDuration=\"0.75\"\n        width=\"56\"\n        visible={true}/>\n    </LoaderStyle>)\n\nexport default Loader;","import { useSelector } from \"react-redux\";\n\nimport { gettIsLoading, getError } from \"redux/contacts/selectors\";\nimport Form from '../components/Form/Form';\nimport { ContactList } from '../components/ContactList/ContactList'\nimport Filter from '../components/Filter/Filter'\nimport { ContactsWraper } from './Contacts.styled'\nimport  Loader  from  '../components/Loader/Loader'\n\n\n  \nconst Contacts = () => {\n  const isLoading = useSelector(gettIsLoading);\n  const error = useSelector(getError);\n\n  return (\n    <ContactsWraper>\n      <Form />\n      <Filter />\n      <ContactList />\n      {isLoading && !error && <Loader/>}\n    </ContactsWraper>\n  )\n};\n\nexport default Contacts;"],"names":["getContacts","state","contacts","items","getFilter","filter","gettIsLoading","isLoading","getError","error","StyleForm","styled","Form","initialValues","name","number","schema","yup","shape","matches","required","integer","FormErrorName","component","render","FormErrorNumber","useSelector","dispatch","useDispatch","style","textAlign","fontSize","fontWeight","onSubmit","value","resetForm","arrayContact","contact","toLowerCase","trim","length","addContact","alert","validationSchema","htmlFor","id","type","Item","IconSmile","BsFillEmojiSmileFill","IconPhone","BsFillTelephoneFill","onClick","deleteContact","List","Info","Filter","ContactList","useEffect","fetchAll","getVisibleContacts","includes","map","StyleName","StyleInput","marginTop","marginBottom","onChange","evt","filterContacts","currentTarget","ContactsWraper","LoaderStyle","strokeColor","strokeWidth","animationDuration","width","visible"],"sourceRoot":""}